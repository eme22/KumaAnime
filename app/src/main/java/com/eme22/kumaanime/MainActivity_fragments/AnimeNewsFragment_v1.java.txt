package com.eme22.kumaanime.MainActivity_fragments;

/*
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;

import androidx.annotation.NonNull;
import androidx.browser.customtabs.CustomTabsIntent;
import androidx.fragment.app.Fragment;
import androidx.preference.PreferenceManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;

import com.eme22.kumaanime.AppUtils.AnimeList_Integration.api.data.models.Common.Paging;
import com.eme22.kumaanime.AppUtils.NewsObject.Datum;
import com.eme22.kumaanime.AppUtils.NewsObject.NewsListFetcher;
import com.eme22.kumaanime.MainActivity_fragments.adapters.NewsAdapter;
import com.eme22.kumaanime.MainActivity_fragments.adapters.NewsAdapter_v2;
import com.eme22.kumaanime.MainActivity_fragments.util.TaskRunner;
import com.eme22.kumaanime.R;
import com.tingyik90.prefmanager.PrefManager;

import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.List;

public class AnimeNewsFragment_v1 extends Fragment{

    private static final TaskRunner taskRunner = new TaskRunner();
    private SharedPreferences prefs;
    private final ArrayList<Datum> prin = new ArrayList<>();
    private NewsAdapter_v2 adapter;
    private ProgressBar ps;
    private SwipeRefreshLayout sv;
    private static final int FIRST_PAGE = 1;
    private int LAST_REQUESTED = FIRST_PAGE;
    private boolean END;
    boolean isLoading = false;
    RecyclerView rs;
    int mode;

    private final SharedPreferences.OnSharedPreferenceChangeListener listener = (sharedPreferences, key) -> {
        if (key.equals("NEWSMODE")){
            try {
                refreshview();
            }catch (Exception e){
                e.printStackTrace();
                Log.e("ERROR", "DA");
            }
        }
    };

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mode = Integer.parseInt(new PrefManager(requireContext()).getString("NEWSMODE","0"));
        prefs = PreferenceManager.getDefaultSharedPreferences(requireContext());
        prefs.registerOnSharedPreferenceChangeListener(listener);
    }

    @Override
    public void onDestroy() {
        prefs.unregisterOnSharedPreferenceChangeListener(listener);
        super.onDestroy();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_anime_news, container, false);

        rs = view.findViewById(R.id.anime_news_recicler);
        sv = view.findViewById(R.id.news_swipetorefresh);

        //ps = view.findViewById(R.id.myanime_news_progress_bar);
        //  rs.setVisibility(View.GONE);
        LinearLayoutManager ll = new LinearLayoutManager(getContext());
        rs.setLayoutManager(ll);
        rs.setNestedScrollingEnabled(false);
        rs.setItemViewCacheSize(10);
        rs.setDrawingCacheEnabled(true);
        rs.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_AUTO);
        refreshview();
        //NestedScrollView ns = view.findViewById(R.id.anime_news_scroll);

        rs.addOnScrollListener(new RecyclerView.OnScrollListener() {
            @Override
            public void onScrolled(@NotNull RecyclerView recyclerView, int dx, int dy) {
                if (dy > 0) {
                    Log.e("test","reached the last element of recyclerview");
                    int visibleItemCount = ll.getChildCount();
                    int totalItemCount = ll.getItemCount();
                    int pastVisiblesItems = ll.findFirstVisibleItemPosition();
                    if ((visibleItemCount + pastVisiblesItems) >= totalItemCount) {
                        if(!END){
                            LAST_REQUESTED=LAST_REQUESTED+1;
                            ps.setVisibility(View.VISIBLE);
                            manageanime(LAST_REQUESTED,mode);
                        }
                    }

                }
            }
        });
        /*
        ns.setOnScrollChangeListener((NestedScrollView.OnScrollChangeListener) (v, scrollX, scrollY, oldScrollX, oldScrollY) -> {
            if (scrollY == v.getChildAt(0).getMeasuredHeight()- v.getMeasuredHeight()){
                if(!END){
                    LAST_REQUESTED=LAST_REQUESTED+1;
                    ps.setVisibility(View.VISIBLE);
                    manageanime(LAST_REQUESTED,mode);
                }
            }
        });
        */
        sv.setOnRefreshListener(this::refreshview);

        return view;
    }

    void refreshview(){
        LAST_REQUESTED = 1;
        mode = Integer.parseInt(new PrefManager(requireContext()).getString("NEWSMODE","0"));
        prin.clear();
        END = false;
        ps.setVisibility(View.VISIBLE);
        adapter = new NewsAdapter_v2(null, new NewsAdapter_v2.OnItemClicked() {
            @Override
            public void onItemClick(String link) {
                CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder();
                builder.setToolbarColor(R.attr.colorPrimary);
                CustomTabsIntent customTabsIntent = builder.build();
                if (mode == 1) customTabsIntent.launchUrl(requireContext(), Uri.parse("https://translate.google.com/translate?sl=en&tl=es&u="+link));
                else customTabsIntent.launchUrl(requireContext(), Uri.parse(link));
            }
        });
        rs.setAdapter(adapter);
        manageanime(LAST_REQUESTED,mode);
    }

    private void initAdapter() {
        adapter = new NewsAdapter_v2(null, new NewsAdapter_v2.OnItemClicked() {
            @Override
            public void onItemClick(String link) {
                CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder();
                builder.setToolbarColor(R.attr.colorPrimary);
                CustomTabsIntent customTabsIntent = builder.build();
                if (mode == 1) customTabsIntent.launchUrl(requireContext(), Uri.parse("https://translate.google.com/translate?sl=en&tl=es&u="+link));
                else customTabsIntent.launchUrl(requireContext(), Uri.parse(link));
            }
        });

        rs.setAdapter(adapter);
    }

    private void initScrollListener() {
        rs.addOnScrollListener(new RecyclerView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);
            }

            @Override
            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {
                super.onScrolled(recyclerView, dx, dy);

                LinearLayoutManager linearLayoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();

                if (!isLoading) {
                    if (linearLayoutManager != null && linearLayoutManager.findLastCompletelyVisibleItemPosition() == prin.size() - 1) {
                        //bottom of list!
                        if(!END){
                            LAST_REQUESTED=LAST_REQUESTED+1;
                            manageanime(LAST_REQUESTED,mode);
                            isLoading = true;
                        }

                    }
                }
            }
        });


    }



   void manageanime(int page,int mode){
       prin.add(null);
       adapter.notifyItemInserted(prin.size() - 1);
       taskRunner.executeAsync(new NewsListFetcher(page, requireContext()), result -> {

           prin.remove(prin.size() - 1);
           int scrollPosition = prin.size();
           adapter.notifyItemRemoved(scrollPosition);

           List<Datum> d = result.getData();
           if (mode == 1) {
               Paging p = result.getPaging();
               if (p.getNext() == null) END = true;
               else parseresult(result.getData());
           }
           else {
               if(d.size()>0){
                   parseresult(result.getData());
               }
               else {
                   END = true;
               }
           }
               });
    }

    private void parseresult(List<Datum> data) {
        prin.addAll(data);
        adapter.notifyDataSetChanged();
        isLoading = false;
    }

}
*/